#!/usr/bin/env bb

;;
;; Command line helper to query Pocket inventory
;;
;; Login: In order to use the app, first you have to login via browser authentication (Oauth 2)
;; $ _pocket --login
;;
;; * ref: https://getpocket.com/developer/docs/authentication
;;
;; Example:
;;
;;
;; Ref:
;; + Manage pocket consumer keys: https://getpocket.com/developer/apps/
;; + API: https://getpocket.com/developer/docs/v3/retrieve
;;

(require '[babashka.curl :as curl]
         '[clojure.java.io :as io]
         '[cheshire.core :as json]
         '[org.httpkit.server :as server]
         '[clojure.tools.cli :refer [parse-opts]])

(def cli-options
  [[nil "--login" "Login to pocket"]
   ["-t" "--tag TAG" "Tag name"
    :default ""]
   ["-q" "--query QUERY" "Search query"
    :default ""]
   ["-p" "--port" "Port to run _pocket server (default: 10003)"
    :default 10003
    :parse-fn #(Integer/parseInt %)]
   ["-h" "--help"]])

(def args
  (->> cli-options
      (parse-opts *command-line-args*)
      :options))

(def redirect-uri (str "http://localhost:" (:port args)))
(defonce app (atom nil))
(def app-promise (promise))

(def token-dir (format "%s/.env" (System/getenv "HOME")))
(def access-token-file (format "%s/POCKET_ACCESS_TOKEN" token-dir))

(defn check-pocket-consumer-key []
  (let [consumer-key (System/getenv "POCKET_CONSUMER_KEY")]
    (if consumer-key
      consumer-key
      (do
        (println "You have to setup POCKET_CONSUMER_KEY first")
        (System/exit 1)))))

(defn check-access-token []
  (if (.exists (io/file access-token-file))
    (slurp access-token-file)
    (do
      (println "You have to login first: '_pocket --login'")
      (System/exit 1))))

(defn get-request-token [consumer-key]
  (let [url (format "https://getpocket.com/v3/oauth/request?consumer_key=%s&redirect_uri=%s"
                    consumer-key
                    redirect-uri)]
    (-> url
        (curl/post {:headers {"X-accept" "application/json"}})
        :body
        (json/parse-string true)
        :code)))

(defn get-access-token [consumer-key authen-code]
  (let [url (format "https://getpocket.com/v3/oauth/authorize?consumer_key=%s&code=%s"
                    consumer-key
                    authen-code)]
    (-> url
        (curl/post {:headers {"X-accept" "application/json"}})
        :body
        (json/parse-string true)
        :access_token)))

(defn save-access-token [access-token]
  (do
    (when-not (.exists (io/file token-dir))
      (.mkdir (io/file token-dir)))
    (spit access-token-file access-token)))

(defn token-handler [{:keys [:uri]}]
  (when (str/starts-with? uri "/")
    (let [[_ consumer-key request-token] (str/split uri #"/")
          access-token (get-access-token consumer-key request-token)]
      (save-access-token access-token)))

  (when-not (nil? app)
    (@app :timeout 100)
    (reset! app nil)
    (deliver app-promise "Done")))

(defn login [consumer-key]
  (let [request-token (get-request-token consumer-key)
        authen-link (format
                     "https://getpocket.com/auth/authorize?request_token=%s&redirect_uri=%s/%s/%s"
                     request-token
                     redirect-uri
                     consumer-key
                     request-token)]
    (do
      (println "Please authenticate the app through the following link:\n")
      (println authen-link)

      (reset! app (server/run-server token-handler {:port (:port args)}))
      (println @app-promise))))

(defn retrieve [consumer-key access-token]
  (def result
    (let [url (format "https://getpocket.com/v3/get?consumer_key=%s&access_token=%s&contentType=article&sort=newest&detailType=simple&tag=%s&search=%s"
               consumer-key
               access-token
               (:tag args)
               (:query args))]
      (-> url
          curl/get
          :body
          (json/parse-string true))))

  (do
    (println "ID\tTITLE\tLINK")
    (doseq [item (vals (:list result))]
      (println (format "%s\t%s\t%s\n"
                       (:item_id item)
                       (:given_title item)
                       (:given_url item))))))


;; main
(def consumer-key (check-pocket-consumer-key))

(cond
  (:login args) (login consumer-key)
  :else (do
          (def access-token (check-access-token))
          (retrieve consumer-key access-token)))
